name: Build/Push (tag)

on:
  push:
    tags:
      - "*"

env:
  GO_VERSION: "1.24.1"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go test -v -race ./...

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: azure/docker-login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest
      - name: Get version
        id: version
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      - name: Build & push Docker images
        run: |
          docker buildx build \
            --platform linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64 \
            --output=type=registry,push=true \
            --tag ekofr/pihole-exporter:${{ steps.version.outputs.TAG_NAME }} .

  release:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      upload_url: ${{ steps.create.outputs.upload_url }}
    steps:
      - name: Create release
        id: create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  upload-binaries:
    needs: release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: 386
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm
          - os: macos-latest
            goos: darwin
            goarch: amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
          - os: ubuntu-latest
            goos: windows
            goarch: 386
            extension: ".exe"
          - os: ubuntu-latest
            goos: windows
            goarch: amd64
            extension: ".exe"
    runs-on: ${{ matrix.os }}
    env:
      EXT: ${{ matrix.extension }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binary
        run: |
          export FILENAME=pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o $FILENAME .

      - name: Generate SHA256
        run: |
          FILE=pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}
          if command -v sha256sum &>/dev/null; then
            sha256sum "$FILE" > "$FILE.sha256.txt"
          else
            shasum -a 256 "$FILE" > "$FILE.sha256.txt"
          fi

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}
          asset_name: pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ./pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}.sha256.txt
          asset_name: pihole_exporter-${{ matrix.goos }}-${{ matrix.goarch }}${{ env.EXT }}.sha256.txt
          asset_content_type: text/plain
